# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .asset_type import AssetType
from .data import Data
from .file_structure import FileStructure
from .status import Status


class Asset(pydantic_v1.BaseModel):
    """
    Asset model. It is used to represent an asset in asset library.
    """

    asset_type: AssetType
    created_at: str = pydantic_v1.Field()
    """
    Asset creation time.
    """

    data: Data = pydantic_v1.Field()
    """
    Asset data. It shows the type of data for an asset.
    """

    description: str = pydantic_v1.Field()
    """
    Asset description. It is used to provide more information.
    """

    file_structure: typing.Optional[FileStructure] = pydantic_v1.Field(default=None)
    """
    File structure.
    """

    hf_repo: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Hugging Face repository.
    """

    id: str = pydantic_v1.Field()
    """
    Asset id. A unique identifier for the asset.
    """

    is_public: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    True if asset is public.
    """

    name: str = pydantic_v1.Field()
    """
    Asset name. A unique name for the asset.
    """

    size_bytes: int = pydantic_v1.Field()
    """
    Asset size in bytes.
    """

    status: Status = pydantic_v1.Field()
    """
    Asset status. It shows the current status of the asset in asset library.
    """

    status_details: str = pydantic_v1.Field()
    """
    Asset status details.
    """

    status_info: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Asset status info. Provides extra information about the asset.
    """

    tenant_uuid: str = pydantic_v1.Field()
    """
    Asset tenant ID. This is unique for each OctoAI user.
    """

    url: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A unique URL for the asset.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
