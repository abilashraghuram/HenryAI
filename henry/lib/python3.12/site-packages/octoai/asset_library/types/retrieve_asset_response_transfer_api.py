# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class RetrieveAssetResponseTransferApi_None(pydantic_v1.BaseModel):
    """
    Transfer API used to retrieve the asset.
    """

    type: typing.Literal["none"] = "none"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class RetrieveAssetResponseTransferApi_PresignedUrl(pydantic_v1.BaseModel):
    """
    Transfer API used to retrieve the asset.
    """

    get_url: str
    put_url: str
    type: typing.Literal["presigned-url"] = "presigned-url"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class RetrieveAssetResponseTransferApi_Sts(pydantic_v1.BaseModel):
    """
    Transfer API used to retrieve the asset.
    """

    aws_access_key_id: str
    aws_secret_access_key: str
    aws_session_token: typing.Optional[str] = None
    s3bucket: str = pydantic_v1.Field(alias="s3_bucket")
    s3endpoint_url: typing.Optional[str] = pydantic_v1.Field(alias="s3_endpoint_url", default=None)
    s3key: str = pydantic_v1.Field(alias="s3_key")
    s3url: str = pydantic_v1.Field(alias="s3_url")
    type: typing.Literal["sts"] = "sts"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


RetrieveAssetResponseTransferApi = typing.Union[
    RetrieveAssetResponseTransferApi_None,
    RetrieveAssetResponseTransferApi_PresignedUrl,
    RetrieveAssetResponseTransferApi_Sts,
]
