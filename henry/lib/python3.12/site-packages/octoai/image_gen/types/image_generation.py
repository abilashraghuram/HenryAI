# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class ImageGeneration(pydantic_v1.BaseModel):
    """
    Represent a generated image.
    """

    image_b64: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The generated image or None if it was removed for safety.
    """

    removed_for_safety: bool = pydantic_v1.Field()
    """
    True if the image was removed for safety, False otherwise.
    """

    safety_score: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Safety score of the image generated.
    """

    seed: int = pydantic_v1.Field()
    """
    Seed used to generate the image. It can be used to recreate the generation.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
