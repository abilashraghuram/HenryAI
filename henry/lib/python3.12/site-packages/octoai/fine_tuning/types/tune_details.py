# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .lora_tune_checkpoint import LoraTuneCheckpoint
from .lora_tune_file import LoraTuneFile


class TuneDetails_LoraTune(pydantic_v1.BaseModel):
    """
    Tune details. This field is used to store a specific tune type configurations.
    """

    base_checkpoint: LoraTuneCheckpoint
    files: typing.List[LoraTuneFile]
    resize_images: typing.Optional[bool] = None
    seed: typing.Optional[int] = None
    steps: int
    trigger_words: typing.List[str]
    tune_type: typing.Literal["lora_tune"] = "lora_tune"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class TuneDetails_TextToSpeechLatentTune(pydantic_v1.BaseModel):
    """
    Tune details. This field is used to store a specific tune type configurations.
    """

    asset_ids: typing.List[str]
    inline_assets: typing.Optional[bool] = None
    tune_type: typing.Literal["text_to_speech_latent_tune"] = "text_to_speech_latent_tune"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class TuneDetails_TextTune(pydantic_v1.BaseModel):
    """
    Tune details. This field is used to store a specific tune type configurations.
    """

    checkpoint: str
    epochs: typing.Optional[int] = None
    learning_rate: typing.Optional[float] = None
    lora_rank: typing.Optional[int] = None
    tune_type: typing.Literal["text_tune"] = "text_tune"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


TuneDetails = typing.Union[TuneDetails_LoraTune, TuneDetails_TextToSpeechLatentTune, TuneDetails_TextTune]
